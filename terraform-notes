#### Some important point and concepts ####

1. Terraform init cmd - looks at our config in all of our terraform files(.tf) and look for the providers we have defined.

We have AWS and downloads the necessary plugins to interact with AWS API.

$ terraform init

Initializing the backend...

Initializing provider plugins...
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v3.65.0...


- Installed hashicorp/aws v3.65.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.



2. $ terraform plan to see any changes that are required for your infrastructure. Does a dry run on your code to protect your prod infrastructure.

Quick sanitary check so that you do not break anything on production.

Example:

$ terraform plan
╷
│ Error: Unsupported argument
│
│   on main.tf line 8, in resource "aws_instance" "my-first-server":
│    8: am = ami-0279c3b3186e54acd
│
│ An argument named "am" is not expected here. Did you mean "arn"?
╵

3. when terraform plan runs successfully.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value:


4. enter "yes" as the value


aws_instance.my-first-server: Creating...
aws_instance.my-first-server: Still creating... [10s elapsed]
aws_instance.my-first-server: Still creating... [20s elapsed]
aws_instance.my-first-server: Still creating... [30s elapsed]
aws_instance.my-first-server: Still creating... [40s elapsed]
aws_instance.my-first-server: Still creating... [50s elapsed]
aws_instance.my-first-server: Still creating... [1m0s elapsed]
aws_instance.my-first-server: Creation complete after 1m6s [id=i-01a8cc533f6f4e245]



Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

5. Terraform is written in a declarative language.
It is a blueprint of our infrastructure.
It is not a set of instructions to terraform to perform but the details of how our infrastructure should look like. That being said, if you run the cmd terraform apply multiple times does not create multiple instances. Just the only resource that is declared in the code is created. Nothing more!
If you comment out the resource section and then run terraform apply command, terraform checks the file and realises that there should not be any resources and hence it deletes/destroys the resources without you having run the terraform destroy command.
6. 




Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.

$ terraform plan -out=main.tf
Saved the plan to: main.tf

To perform exactly these actions, run the following command to apply:
    terraform apply "main.tf"

$ terraform apply "main.tf"

$ terraform apply "main.tf"
aws_instance.my-first-server: Modifying... [id=i-01a8cc533f6f4e245]
aws_instance.my-first-server: Still modifying... [id=i-01a8cc533f6f4e245, 10s elapsed]
aws_instance.my-first-server: Modifications complete after 12s [id=i-01a8cc533f6f4e245]

Apply complete! Resources: 0 added, 1 changed, 0 destroyed.


7. The order of your code does not matter in terraform.
You can reference a resource id earlier even though the resource creation declaration follows it's resource id.


8. $ terraform plan
╷
│ Error: Incorrect attribute value type
│
│   on main.tf line 69, in resource "aws_network_interface" "web-tf-if":
│   69:   private_ip = [ "192.168.0.50" ]
│
│ Inappropriate value for attribute "private_ip": string required.


--- soln = use private_ips

9.

$ terraform plan
$ terraform plan
╷
│ Error: Incorrect attribute value type
│
│   on main.tf line 37, in resource "aws_route_table" "tf-web-rt":
│   37:     gateway_id = aws_internet_gateway.tf-web-igw
│     ├────────────────
│     │ aws_internet_gateway.tf-web-igw is object with 6 attributes
│
│ Inappropriate value for attribute "gateway_id": string required.
╵

soln = use .id at the end of igw reference

10.

Error: error creating EC2 Network Interface: InvalidParameterValue: Address does not fall within the subnet's address range
│       status code: 400, request id: 9a0265ed-9faf-4754-af09-51d450761657
│
│   with aws_network_interface.web-tf-if,
│   on main.tf line 66, in resource "aws_network_interface" "web-tf-if":
│   66: resource "aws_network_interface" "web-tf-if" {
│

soln = 192.168.1.51 instead of 192.168.0.51

11.

Error: Failure associating EIP: IncorrectInstanceState: The pending-instance-creation instance to which 'eni-02f96c1bf37a62c6e' is attached is not in a valid state for this operation
│       status code: 400, request id: b3daa28a-a3e0-4bcc-836d-7da6298b0992
│
│   with aws_eip.tf-ip,
│   on main.tf line 73, in resource "aws_eip" "tf-ip":
│   73: resource "aws_eip" "tf-ip" {
│

soln = use the correct private ip = 192.168.1.51 instead of 192.168.0.51╷

12. 

$ terraform apply -auto-approve
╷
│ Error: Unsupported block type
│
│   on main.tf line 91, in resource "aws_eip" "tf-ip":
│   91:   output "server-public-ip" {
│
│ Blocks of type "output" are not expected here.

soln = use a separate block outside resource block as below

output "server-public-ip" {
  value = "aws_eip.tf-ip.public_ip"
}

**** each output must be declared separately.
Multiple line for multiple 

13. terraform refresh to check the output of the IaaC without actually deploying on production.

14. To terminate your instance only and leave everything else untouched use the destroy command with target flag as below

$ terraform destroy -target aws_instance.<your resource name>

The name can be obtained from terraform state list command

14. $ terraform plan -var-file='../../../private/terraform.tfvars'
╷
│ Error: Invalid reference
│
│   on modeuleone.tf line 16, in provider "aws":
│   16:   region = us-east-1
│
│ A reference to a resource type must be followed by at least one attribute
│ access, specifying the resource name.
╵

soln = "us -east-1" ## use double quotes

15.
aws_instance.tf-nginx: Creating...
╷
│ Error: Error launching source instance: InvalidGroup.NotFound: The security group 'tf-web-sg' does not exist in VPC 'vpc-083b807623e8204e8'
│       status code: 400, request id: a97a7bcd-c063-4e65-a392-3101af347855
│
│   with aws_instance.tf-nginx,
│   on modeuleone.tf line 85, in resource "aws_instance" "tf-nginx":
│   85: resource "aws_instance" "tf-nginx" {        
│

soln: you have not provided the id of the SG that should be attached to the instance. Use security_groups = [ aws_security_group.tf-web-sg.id]
